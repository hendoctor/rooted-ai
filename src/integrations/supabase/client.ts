
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { get, set, del } from 'idb-keyval';

const SUPABASE_URL = "https://ylewpehqfgltbhpkaout.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlsZXdwZWhxZmdsdGJocGthb3V0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk4NDkzMTcsImV4cCI6MjA2NTQyNTMxN30.ljNvNQSG0A2RsRkW8WXxADiOqVmZywD2GX318riotXs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Configure client to persist sessions and auto refresh tokens even when
// the tab is not focused. This helps prevent hanging auth state when the
// user navigates away from the application.
// Reliable auth storage with fallback for mobile/PWA
const authStorage = {
  getItem: async (key: string) => {
    try {
      return await get(key);
    } catch (error) {
      console.warn('IndexedDB failed, falling back to localStorage:', error);
      return localStorage.getItem(key);
    }
  },
  setItem: async (key: string, value: string) => {
    try {
      await set(key, value);
    } catch (error) {
      console.warn('IndexedDB failed, falling back to localStorage:', error);
      localStorage.setItem(key, value);
    }
  },
  removeItem: async (key: string) => {
    try {
      await del(key);
    } catch (error) {
      console.warn('IndexedDB failed, falling back to localStorage:', error);
      localStorage.removeItem(key);
    }
  },
};

export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      storage: authStorage,
    },
    realtime: {
      params: { eventsPerSecond: 10 },
    },
  }
);
